thanos:
  fullnameOverride: thanos
  queryFrontend:
    enabled: true
    extraFlags:
    - --query-range.split-interval=12h 
    - --query-frontend.log-queries-longer-than=10s
    - --query-frontend.compress-responses
    - |-
      --query-range.response-cache-config="config":
        "max_size": "500MB"
        "max_size_items": 0
        "validity": 0s
      "type": "in-memory"
  query:
    extraFlags:
    - --query.auto-downsampling
    replicaLabel: [agent_replica, sidecar_replica]
    stores:
    - dnssrv+_grpc._tcp.kube-prometheus-thanos-ruler
    - 213.131.230.153:10901
  receive:
    enabled: true
    replicaCount: 1
    replicaLabel: receive_replica
    service:
      type: NodePort
      nodePorts:
        remote: 30291

grafanaDatasourcesAsConfigMap:
  cluster-metrics:
  - name: thanos
    isDefault: true
    type: prometheus
    access: proxy
    url: http://thanos-query-frontend:9090
  cluster-logs: null
loki:
  enabled: false
promtail:
  enabled: false

kube-prometheus-stack:
  kubeScheduler:
    serviceMonitor:
      insecureSkipVerify: true
  kubeControllerManager:
    serviceMonitor:
     insecureSkipVerify: true
  grafana:
    service:
      type: NodePort
      nodePort: 30000
  prometheus:
    prometheusSpec:
      replicas: 2
      replicaExternalLabelName: sidecar_replica
      externalLabels:
        cluster: observer-cluster
  defaultRules:
    create: false
    labels:
      prometheus_rule: '2'
  additionalPrometheusRulesMap:
    dnation-kubernetes-monitoring-rules:
      additionalLabels:
        prometheus_rule: '2'
      groups:
      - name: k8s.rules
        rules:
        - alert: KubernetesMonitoringClusterDown
          expr: 'kaas unless on(cluster) up'
          for: 5m
          labels:
            alertgroup: Cluster
            severity: critical
          annotations:
            message: 'Cluster {{ $labels.cluster }} is down.'
        # add recording rules manually as prometheusRules are disabled in values-observer-dash.yaml
        - record: 'master_uname_info'
          expr: 'node_uname_info{job=~"node-exporter"} and on(nodename) label_replace(kube_node_role{role=~"control-plane"}, "nodename", "$1", "node", "(.+)")'
        - record: 'worker_uname_info'
          expr: 'node_uname_info{job=~"node-exporter"} unless on(nodename) label_replace(kube_node_role{role=~"control-plane"}, "nodename", "$1", "node", "(.+)")'
  nameOverride: kube-prometheus
  thanosRuler:
    enabled: true
    service:
      additionalPorts:
      - name: grpc
        port: 10901
        protocol: TCP
        targetPort: 10901
    thanosRulerSpec:
      ruleSelector:
        matchLabels:
          prometheus_rule: '2'
      queryEndpoints:
      - dnssrv+_http._tcp.thanos-query
      alertmanagersUrl:
      - http://kube-prometheus-alertmanager:9093
