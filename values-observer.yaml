thanos:
  fullnameOverride: thanos
  queryFrontend:
    enabled: true
    extraFlags:
    - --query-range.split-interval=12h
    - --query-frontend.log-queries-longer-than=10s
    - --query-frontend.compress-responses
    - |-
      --query-range.response-cache-config="config":
        "max_size": "500MB"
        "max_size_items": 0
        "validity": 0s
      "type": "in-memory"
  query:
    replicaCount: 2
    extraFlags:
    - --query.auto-downsampling
    - --query.lookback-delta=1m
    replicaLabel: [agent_replica, sidecar_replica, prometheus_replica]
    stores:
    - dnssrv+_grpc._tcp.kube-prometheus-thanos-ruler
  receive:
    enabled: true
    replicaCount: 1
    replicaLabel: receive_replica
    service:
      type: NodePort
      nodePorts:
        remote: 30291
    tsdbRetention: 1d

grafanaDatasourcesAsConfigMap:
  cluster-metrics:
  - name: thanos
    isDefault: true
    type: prometheus
    access: proxy
    url: http://thanos-query-frontend:9090
  cluster-logs: null
loki:
  enabled: false
promtail:
  enabled: false

kube-prometheus-stack:
  kubeScheduler:
    serviceMonitor:
      # TODO fix this:
      insecureSkipVerify: true
  kubeControllerManager:
    serviceMonitor:
      # TODO fix this:
      insecureSkipVerify: true
  grafana:
## SCS branding
#    extraConfigmapMounts:
#      - name: scs-logo
#        mountPath: /usr/share/grafana/public/img/scs_logo.svg
#        subPath: scs_logo.svg
#        configMap: scs-logo
#      - name: dnation-home
#        mountPath: /usr/share/grafana/public/dashboards/home.json
#        subPath: home.json
#        configMap: dnation-home
#    extraSecretMounts:
#      - name: scs-brand
#        mountPath: /etc/secrets
#        secretName: scs-brand
#        defaultMode: 0755
    service:
      type: NodePort
      nodePort: 30000
    env:
      GF_AUTH_ANONYMOUS_ENABLED: true
  prometheus:
    prometheusSpec:
      replicas: 2
      replicaExternalLabelName: sidecar_replica
      externalLabels:
        cluster: observer-cluster
  defaultRules:
    labels:
      prometheus_rule: '2'
  additionalPrometheusRulesMap:
    dnation-kubernetes-monitoring-rules:
      additionalLabels:
        prometheus_rule: '2'
      groups:
      - name: k8s.rules
        rules:
        - alert: KubernetesMonitoringClusterDown
          expr: 'kaas unless on(cluster) up'
          labels:
            alertgroup: Cluster
            severity: critical
          annotations:
            message: 'Cluster {{ $labels.cluster }} is down.'
        - alert: BlackboxProbeFailed
          expr: 'probe_success == 0'
          for: 5m
          labels:
            severity: critical
          annotations:
            message: 'Blackbox probe on target: {{ $labels.target }} failed'
        - alert: BlackboxSlowProbe
          expr: 'avg_over_time(probe_duration_seconds[1m]) > 5'
          for: 5m
          labels:
            severity: warning
          annotations:
            message: '"Blackbox probe on target: {{ $labels.target }} took more than 5s to complete, probe time = {{ $value }}'
        - alert: BlackboxSslCertificateWillExpireSoon
          expr: 'round((probe_ssl_earliest_cert_expiry - time()) / 86400, 0.1) < 30'
          for: 5m
          labels:
            severity: warning
          annotations:
            message: 'SSL certificate expires in {{ $value }} days'
  nameOverride: kube-prometheus
  alertmanager:
    service:
      type: NodePort
      nodePort: 30001
  thanosRuler:
    enabled: true
    service:
      additionalPorts:
      - name: grpc
        port: 10901
        protocol: TCP
        targetPort: 10901
    thanosRulerSpec:
      evaluationInterval: "1m"
      ruleSelector:
        matchLabels:
          prometheus_rule: '2'
      queryEndpoints:
      - dnssrv+_http._tcp.thanos-query
      alertmanagersUrl:
      - http://kube-prometheus-alertmanager:9093
