thanos:
  fullnameOverride: thanos
  query:
    replicaCount: 2
    replicaLabel: [prometheus_replica]
## FIXME: Thanos query is temporary exposed via (unsecure) NodePort, see https://github.com/SovereignCloudStack/k8s-observability/issues/32
##   Thanos query should be exposed via ingress, see below commented section
    serviceGrpc:
      type: NodePort
      nodePorts:
        grpc: "31050"
## Temporary disabled, see https://github.com/SovereignCloudStack/k8s-observability/issues/32
#    ingress:
#      enabled: false
#      grpc:
#        enabled: true
#        ingressClassName: nginx
#        annotations:
#          nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
#          nginx.ingress.kubernetes.io/ssl-redirect: "true"
#          nginx.ingress.kubernetes.io/grpc-backend: "true"
#          nginx.ingress.kubernetes.io/auth-tls-secret: "default/query-harbor.dnation.cloud"
#          nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
#        hostname: query-harbor.dnation.cloud
#        tls: false
#        extraTls:
#        - hosts:
#          - query-harbor.dnation.cloud
#          secretName: query-harbor.dnation.cloud

containerLabel: &containerLabel
  sourceLabels: [__meta_kubernetes_pod_container_name]
  separator: ;
  regex: ^(.*)$
  targetLabel: container
  replacement: $1
  action: replace

dnation-kubernetes-monitoring:
  dnation-kubernetes-jsonnet-translator:
    enabled: false
  prometheusRules:
    enable: false
  grafanaDashboards:
    enable: false
  clusterMonitoring:
    clusters:
    - name: Harbor
      description: 'Harbor cluster monitoring'
      label: harbor-cluster
      apps:
      - name: harbor
        description: Harbor
        jobName: harbor
        serviceMonitor:
          jobLabel: app
          namespaceSelector:
            matchNames:
            - default
          selector:
            matchLabels:
              app: harbor
          endpoints:
          - port: http-metrics
            interval: 30s
            path: /metrics
            relabelings:
            - *containerLabel
      - name: status-page-api
        description: Status Page Api
        jobName: status-page-api
        serviceMonitor:
          jobLabel: app
          namespaceSelector:
            matchNames:
              - status-page
          selector:
            matchLabels:
              app: status-page-api
          endpoints:
            - port: metrics
              interval: 30s
              path: /metrics
              relabelings:
                - *containerLabel
      - name: status-page-database
        description: Status Page Database
        jobName: status-page-database
        serviceMonitor:
          jobLabel: app
          namespaceSelector:
            matchNames:
              - status-page
          selector:
            matchLabels:
              app: status-page-api-db
          endpoints:
            - port: metrics
              interval: 30s
              path: /metrics
              relabelings:
                - *containerLabel
      - name: status-page-dex
        description: Status Page Dex
        jobName: status-page-dex
        serviceMonitor:
          jobLabel: app
          namespaceSelector:
            matchNames:
              - status-page
          selector:
            matchLabels:
              app: status-page-dex
          endpoints:
            - port: telemetry
              interval: 30s
              path: /metrics
              relabelings:
                - *containerLabel
      - name: status-page-oathkeeper
        description: Status Page Oathkeeper
        jobName: status-page-oathkeeper
        serviceMonitor:
          jobLabel: app
          namespaceSelector:
            matchNames:
              - status-page
          selector:
            matchLabels:
              app: status-page-oathkeeper
          endpoints:
            - port: metrics
              interval: 30s
              path: /metrics
              relabelings:
                - *containerLabel
loki:
  enabled: false
promtail:
  enabled: false

kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      replicas: 2
      externalLabels:
        cluster: "harbor-cluster"
  alertmanager:
    enabled: false
  grafana:
    enabled: false
  defaultRules:
    create: false
  kubeScheduler:
    serviceMonitor:
      # TODO fix this:
      insecureSkipVerify: true
  kubeControllerManager:
    serviceMonitor:
      # TODO fix this:
      insecureSkipVerify: true
